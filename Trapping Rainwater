Approach: In the previous solution, to find the highest bar on the left and right, array traversal is needed which reduces the efficiency of the solution. 
To make this efficient one must pre-compute the highest bar on the left and right of every bar in linear time. 
Then use these pre-computed values to find the amount of water in every array element.
TC:O(N)
SPACE:O(2*N)
int findWater(int arr[], int n)
{
    int left[n];
    int right[n];
   int water = 0;
// Fill left array
    left[0] = arr[0];
    for (int i = 1; i < n; i++)
        left[i] = max(left[i - 1], arr[i]);
 
    // Fill right array
    right[n - 1] = arr[n - 1];
    for (int i = n - 2; i >= 0; i--)
        right[i] = max(right[i + 1], arr[i]);
    for (int i = 0; i < n; i++)
        water += min(left[i], right[i]) - arr[i];
 
    return water;
}

EFFICIENT:TIME O(N)
SPACE:O(N)


JB BHI LEFT RIGHT KA DEKHNA HO TH DO PASS KRLO EK LEFT K LIYR AUR EK RIGHT K LIYE

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        if(n==0||n==1||n==2)
            return 0;
        vector<int>a(n,0);
        int maxs=height[0];
        //LEFT PASS
        for(int i=0;i<n;i++)
        {
            maxs=max(maxs,height[i]);
            a[i]=maxs-height[i];
        }
        //RIGHT PASS
        maxs=height[n-1];
        for(int i=n-1;i>=0;i--)
        {
            maxs=max(maxs,height[i]);
            a[i]=min(a[i],maxs-height[i]);
        }
        int result=0;
        for(int i=0;i<n;i++)
            result+=a[i];
        return result;
    }
};
APPROACH3:
FRST VALI APPROACHA SE HI RELATE KRKE USKO SPACE OPTIMISE KIA H

int findWater(int arr[], int n)
{
    int result = 0;
    int left_max = 0, right_max = 0;
    int lo = 0, hi = n - 1;
    while (lo <= hi) {
        if (arr[lo] < arr[hi]) {
            if (arr[lo] > left_max)
                left_max = arr[lo];
            else
                result += left_max - arr[lo];
            lo++;
        }
        else {
            if (arr[hi] > right_max)
                right_max = arr[hi];
            else
                result += right_max - arr[hi];
            hi--;
        }
    }
 
    return result;
}
 
