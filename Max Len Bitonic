M1:O(N) extra space
ab isme bhi maxima dekhna h th do paas lagao ek left se aur ek right se

Let us consider the array {12, 4, 78, 90, 45, 23} to understand the soultion.
1) Construct an auxiliary array inc[] from left to right such that inc[i] contains length of the nondecreaing subarray ending at arr[i].
For A[] = {12, 4, 78, 90, 45, 23}, inc[] is {1, 1, 2, 3, 1, 1}

2) Construct another array dec[] from right to left such that dec[i] contains length of nonincreasing subarray starting at arr[i].
For A[] = {12, 4, 78, 90, 45, 23}, dec[] is {2, 1, 1, 3, 2, 1}.

3) Once we have the inc[] and dec[] arrays, all we need to do is find the maximum value of (inc[i] + dec[i] – 1).
For {12, 4, 78, 90, 45, 23}, the max value of (inc[i] + dec[i] – 1) is 5 for i = 3.


#include <bits/stdc++.h> 
using namespace std; 

int bitonic(int arr[], int n) 
{ 
	
	int inc[n]; 
	
	
	int dec[n]; 
	int i, max; 
	inc[0] = 1; 
	dec[n-1] = 1; 
	for (i = 1; i < n; i++) 
	inc[i] = (arr[i] >= arr[i-1])? inc[i-1] + 1: 1; 
	for (i = n-2; i >= 0; i--) 
	dec[i] = (arr[i] >= arr[i+1])? dec[i+1] + 1: 1; 
	max = inc[0] + dec[0] - 1; 
	for (i = 1; i < n; i++) 
		if (inc[i] + dec[i] - 1 > max) 
			max = inc[i] + dec[i] - 1; 

	return max; 
} 
int main() 
{ 
	int arr[] = {12, 4, 78, 90, 45, 23}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	cout << "nLength of max length Bitnoic Subarray is " << bitonic(arr, n); 
	return 0; 
} 

M2:O(1) EXTRA SPACE

	int bitonic(int *a, int n) {
	    if(n==0)
	    return 0;
	    int res=1;
	    int len1=1,len2=2,flag1=0,flag2=0,flag=0,j=0,i;
	    for( i=1;i<n;i++)
	    {
	        if(a[i]>a[i-1])
	        {
	            if(flag1+flag2+flag==4)
	            {
	               // if(i-j>res)
	               // cout<<i<<" "<<j<<endl;
	                 res=max(res,i-j);
	                 j=i-1;
	                 flag2=0;
	                 flag=0;
	            }
	            flag1=1;
	        }
	        else if(a[i]<a[i-1])
	        {
	             if(flag1+flag2==3)
	             {
	                 flag=1;
	             }
	             flag2=2;
	             if(flag1!=1)
	             j=i;
	        }
	    }
	    res=max(res,i-j);
	    return res;
	}
